//
// Generated by Bluespec Compiler, version 2022.01-29-gc526ff54 (build c526ff54)
//
// On Thu Oct 27 05:16:21 CST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_reg_wr_back                O     1 const
// reg_rd_out                     O    64
// RDY_reg_rd_out                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// reg_wr_back_alu_out_to_reg     I    38
// reg_rd_out_id_to_reg           I    12
// EN_reg_wr_back                 I     1
//
// Combinational paths from inputs to outputs:
//   (reg_rd_out_id_to_reg,
//    reg_wr_back_alu_out_to_reg,
//    EN_reg_wr_back) -> reg_rd_out
//   EN_reg_wr_back -> RDY_reg_rd_out
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRegfile(CLK,
		 RST_N,

		 reg_wr_back_alu_out_to_reg,
		 EN_reg_wr_back,
		 RDY_reg_wr_back,

		 reg_rd_out_id_to_reg,
		 reg_rd_out,
		 RDY_reg_rd_out);
  input  CLK;
  input  RST_N;

  // action method reg_wr_back
  input  [37 : 0] reg_wr_back_alu_out_to_reg;
  input  EN_reg_wr_back;
  output RDY_reg_wr_back;

  // value method reg_rd_out
  input  [11 : 0] reg_rd_out_id_to_reg;
  output [63 : 0] reg_rd_out;
  output RDY_reg_rd_out;

  // signals for module outputs
  wire [63 : 0] reg_rd_out;
  wire RDY_reg_rd_out, RDY_reg_wr_back;

  // register regs_0
  reg [31 : 0] regs_0;
  wire [31 : 0] regs_0$D_IN;
  wire regs_0$EN;

  // register regs_1
  reg [31 : 0] regs_1;
  wire [31 : 0] regs_1$D_IN;
  wire regs_1$EN;

  // register regs_10
  reg [31 : 0] regs_10;
  wire [31 : 0] regs_10$D_IN;
  wire regs_10$EN;

  // register regs_11
  reg [31 : 0] regs_11;
  wire [31 : 0] regs_11$D_IN;
  wire regs_11$EN;

  // register regs_12
  reg [31 : 0] regs_12;
  wire [31 : 0] regs_12$D_IN;
  wire regs_12$EN;

  // register regs_13
  reg [31 : 0] regs_13;
  wire [31 : 0] regs_13$D_IN;
  wire regs_13$EN;

  // register regs_14
  reg [31 : 0] regs_14;
  wire [31 : 0] regs_14$D_IN;
  wire regs_14$EN;

  // register regs_15
  reg [31 : 0] regs_15;
  wire [31 : 0] regs_15$D_IN;
  wire regs_15$EN;

  // register regs_16
  reg [31 : 0] regs_16;
  wire [31 : 0] regs_16$D_IN;
  wire regs_16$EN;

  // register regs_17
  reg [31 : 0] regs_17;
  wire [31 : 0] regs_17$D_IN;
  wire regs_17$EN;

  // register regs_18
  reg [31 : 0] regs_18;
  wire [31 : 0] regs_18$D_IN;
  wire regs_18$EN;

  // register regs_19
  reg [31 : 0] regs_19;
  wire [31 : 0] regs_19$D_IN;
  wire regs_19$EN;

  // register regs_2
  reg [31 : 0] regs_2;
  wire [31 : 0] regs_2$D_IN;
  wire regs_2$EN;

  // register regs_20
  reg [31 : 0] regs_20;
  wire [31 : 0] regs_20$D_IN;
  wire regs_20$EN;

  // register regs_21
  reg [31 : 0] regs_21;
  wire [31 : 0] regs_21$D_IN;
  wire regs_21$EN;

  // register regs_22
  reg [31 : 0] regs_22;
  wire [31 : 0] regs_22$D_IN;
  wire regs_22$EN;

  // register regs_23
  reg [31 : 0] regs_23;
  wire [31 : 0] regs_23$D_IN;
  wire regs_23$EN;

  // register regs_24
  reg [31 : 0] regs_24;
  wire [31 : 0] regs_24$D_IN;
  wire regs_24$EN;

  // register regs_25
  reg [31 : 0] regs_25;
  wire [31 : 0] regs_25$D_IN;
  wire regs_25$EN;

  // register regs_26
  reg [31 : 0] regs_26;
  wire [31 : 0] regs_26$D_IN;
  wire regs_26$EN;

  // register regs_27
  reg [31 : 0] regs_27;
  wire [31 : 0] regs_27$D_IN;
  wire regs_27$EN;

  // register regs_28
  reg [31 : 0] regs_28;
  wire [31 : 0] regs_28$D_IN;
  wire regs_28$EN;

  // register regs_29
  reg [31 : 0] regs_29;
  wire [31 : 0] regs_29$D_IN;
  wire regs_29$EN;

  // register regs_3
  reg [31 : 0] regs_3;
  wire [31 : 0] regs_3$D_IN;
  wire regs_3$EN;

  // register regs_30
  reg [31 : 0] regs_30;
  wire [31 : 0] regs_30$D_IN;
  wire regs_30$EN;

  // register regs_31
  reg [31 : 0] regs_31;
  wire [31 : 0] regs_31$D_IN;
  wire regs_31$EN;

  // register regs_4
  reg [31 : 0] regs_4;
  wire [31 : 0] regs_4$D_IN;
  wire regs_4$EN;

  // register regs_5
  reg [31 : 0] regs_5;
  wire [31 : 0] regs_5$D_IN;
  wire regs_5$EN;

  // register regs_6
  reg [31 : 0] regs_6;
  wire [31 : 0] regs_6$D_IN;
  wire regs_6$EN;

  // register regs_7
  reg [31 : 0] regs_7;
  wire [31 : 0] regs_7$D_IN;
  wire regs_7$EN;

  // register regs_8
  reg [31 : 0] regs_8;
  wire [31 : 0] regs_8$D_IN;
  wire regs_8$EN;

  // register regs_9
  reg [31 : 0] regs_9;
  wire [31 : 0] regs_9$D_IN;
  wire regs_9$EN;

  // remaining internal signals
  reg [31 : 0] SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110,
	       SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117;
  wire [31 : 0] IF_reg_rd_out_id_to_reg_BITS_4_TO_0_14_EQ_reg__ETC___d118,
		IF_reg_rd_out_id_to_reg_BITS_9_TO_5_9_EQ_reg_w_ETC___d111;

  // action method reg_wr_back
  assign RDY_reg_wr_back = 1'd1 ;

  // value method reg_rd_out
  assign reg_rd_out =
	     { reg_rd_out_id_to_reg[11] ?
		 IF_reg_rd_out_id_to_reg_BITS_9_TO_5_9_EQ_reg_w_ETC___d111 :
		 32'd0,
	       reg_rd_out_id_to_reg[10] ?
		 IF_reg_rd_out_id_to_reg_BITS_4_TO_0_14_EQ_reg__ETC___d118 :
		 32'd0 } ;
  assign RDY_reg_rd_out = EN_reg_wr_back ;

  // register regs_0
  assign regs_0$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_0$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd0 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_1
  assign regs_1$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_1$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd1 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_10
  assign regs_10$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_10$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd10 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_11
  assign regs_11$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_11$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd11 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_12
  assign regs_12$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_12$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd12 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_13
  assign regs_13$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_13$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd13 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_14
  assign regs_14$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_14$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd14 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_15
  assign regs_15$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_15$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd15 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_16
  assign regs_16$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_16$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd16 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_17
  assign regs_17$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_17$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd17 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_18
  assign regs_18$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_18$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd18 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_19
  assign regs_19$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_19$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd19 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_2
  assign regs_2$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_2$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd2 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_20
  assign regs_20$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_20$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd20 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_21
  assign regs_21$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_21$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd21 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_22
  assign regs_22$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_22$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd22 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_23
  assign regs_23$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_23$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd23 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_24
  assign regs_24$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_24$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd24 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_25
  assign regs_25$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_25$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd25 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_26
  assign regs_26$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_26$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd26 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_27
  assign regs_27$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_27$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd27 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_28
  assign regs_28$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_28$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd28 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_29
  assign regs_29$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_29$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd29 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_3
  assign regs_3$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_3$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd3 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_30
  assign regs_30$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_30$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd30 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_31
  assign regs_31$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_31$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd31 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_4
  assign regs_4$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_4$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd4 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_5
  assign regs_5$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_5$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd5 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_6
  assign regs_6$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_6$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd6 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_7
  assign regs_7$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_7$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd7 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_8
  assign regs_8$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_8$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd8 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // register regs_9
  assign regs_9$D_IN = reg_wr_back_alu_out_to_reg[37:6] ;
  assign regs_9$EN =
	     EN_reg_wr_back && reg_wr_back_alu_out_to_reg[4:0] == 5'd9 &&
	     reg_wr_back_alu_out_to_reg[5] ;

  // remaining internal signals
  assign IF_reg_rd_out_id_to_reg_BITS_4_TO_0_14_EQ_reg__ETC___d118 =
	     (reg_rd_out_id_to_reg[4:0] == reg_wr_back_alu_out_to_reg[4:0] &&
	      reg_wr_back_alu_out_to_reg[5]) ?
	       reg_wr_back_alu_out_to_reg[37:6] :
	       SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 ;
  assign IF_reg_rd_out_id_to_reg_BITS_9_TO_5_9_EQ_reg_w_ETC___d111 =
	     (reg_rd_out_id_to_reg[9:5] == reg_wr_back_alu_out_to_reg[4:0] &&
	      reg_wr_back_alu_out_to_reg[5]) ?
	       reg_wr_back_alu_out_to_reg[37:6] :
	       SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 ;
  always@(reg_rd_out_id_to_reg or
	  regs_0 or
	  regs_1 or
	  regs_2 or
	  regs_3 or
	  regs_4 or
	  regs_5 or
	  regs_6 or
	  regs_7 or
	  regs_8 or
	  regs_9 or
	  regs_10 or
	  regs_11 or
	  regs_12 or
	  regs_13 or
	  regs_14 or
	  regs_15 or
	  regs_16 or
	  regs_17 or
	  regs_18 or
	  regs_19 or
	  regs_20 or
	  regs_21 or
	  regs_22 or
	  regs_23 or
	  regs_24 or
	  regs_25 or
	  regs_26 or regs_27 or regs_28 or regs_29 or regs_30 or regs_31)
  begin
    case (reg_rd_out_id_to_reg[9:5])
      5'd0:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_0;
      5'd1:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_1;
      5'd2:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_2;
      5'd3:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_3;
      5'd4:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_4;
      5'd5:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_5;
      5'd6:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_6;
      5'd7:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_7;
      5'd8:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_8;
      5'd9:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_9;
      5'd10:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_10;
      5'd11:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_11;
      5'd12:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_12;
      5'd13:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_13;
      5'd14:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_14;
      5'd15:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_15;
      5'd16:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_16;
      5'd17:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_17;
      5'd18:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_18;
      5'd19:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_19;
      5'd20:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_20;
      5'd21:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_21;
      5'd22:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_22;
      5'd23:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_23;
      5'd24:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_24;
      5'd25:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_25;
      5'd26:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_26;
      5'd27:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_27;
      5'd28:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_28;
      5'd29:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_29;
      5'd30:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_30;
      5'd31:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d110 = regs_31;
    endcase
  end
  always@(reg_rd_out_id_to_reg or
	  regs_0 or
	  regs_1 or
	  regs_2 or
	  regs_3 or
	  regs_4 or
	  regs_5 or
	  regs_6 or
	  regs_7 or
	  regs_8 or
	  regs_9 or
	  regs_10 or
	  regs_11 or
	  regs_12 or
	  regs_13 or
	  regs_14 or
	  regs_15 or
	  regs_16 or
	  regs_17 or
	  regs_18 or
	  regs_19 or
	  regs_20 or
	  regs_21 or
	  regs_22 or
	  regs_23 or
	  regs_24 or
	  regs_25 or
	  regs_26 or regs_27 or regs_28 or regs_29 or regs_30 or regs_31)
  begin
    case (reg_rd_out_id_to_reg[4:0])
      5'd0:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_0;
      5'd1:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_1;
      5'd2:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_2;
      5'd3:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_3;
      5'd4:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_4;
      5'd5:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_5;
      5'd6:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_6;
      5'd7:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_7;
      5'd8:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_8;
      5'd9:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_9;
      5'd10:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_10;
      5'd11:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_11;
      5'd12:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_12;
      5'd13:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_13;
      5'd14:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_14;
      5'd15:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_15;
      5'd16:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_16;
      5'd17:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_17;
      5'd18:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_18;
      5'd19:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_19;
      5'd20:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_20;
      5'd21:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_21;
      5'd22:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_22;
      5'd23:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_23;
      5'd24:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_24;
      5'd25:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_25;
      5'd26:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_26;
      5'd27:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_27;
      5'd28:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_28;
      5'd29:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_29;
      5'd30:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_30;
      5'd31:
	  SEL_ARR_regs_0_7_regs_1_8_regs_2_9_regs_3_0_re_ETC___d117 = regs_31;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        regs_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regs_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (regs_0$EN) regs_0 <= `BSV_ASSIGNMENT_DELAY regs_0$D_IN;
	if (regs_1$EN) regs_1 <= `BSV_ASSIGNMENT_DELAY regs_1$D_IN;
	if (regs_10$EN) regs_10 <= `BSV_ASSIGNMENT_DELAY regs_10$D_IN;
	if (regs_11$EN) regs_11 <= `BSV_ASSIGNMENT_DELAY regs_11$D_IN;
	if (regs_12$EN) regs_12 <= `BSV_ASSIGNMENT_DELAY regs_12$D_IN;
	if (regs_13$EN) regs_13 <= `BSV_ASSIGNMENT_DELAY regs_13$D_IN;
	if (regs_14$EN) regs_14 <= `BSV_ASSIGNMENT_DELAY regs_14$D_IN;
	if (regs_15$EN) regs_15 <= `BSV_ASSIGNMENT_DELAY regs_15$D_IN;
	if (regs_16$EN) regs_16 <= `BSV_ASSIGNMENT_DELAY regs_16$D_IN;
	if (regs_17$EN) regs_17 <= `BSV_ASSIGNMENT_DELAY regs_17$D_IN;
	if (regs_18$EN) regs_18 <= `BSV_ASSIGNMENT_DELAY regs_18$D_IN;
	if (regs_19$EN) regs_19 <= `BSV_ASSIGNMENT_DELAY regs_19$D_IN;
	if (regs_2$EN) regs_2 <= `BSV_ASSIGNMENT_DELAY regs_2$D_IN;
	if (regs_20$EN) regs_20 <= `BSV_ASSIGNMENT_DELAY regs_20$D_IN;
	if (regs_21$EN) regs_21 <= `BSV_ASSIGNMENT_DELAY regs_21$D_IN;
	if (regs_22$EN) regs_22 <= `BSV_ASSIGNMENT_DELAY regs_22$D_IN;
	if (regs_23$EN) regs_23 <= `BSV_ASSIGNMENT_DELAY regs_23$D_IN;
	if (regs_24$EN) regs_24 <= `BSV_ASSIGNMENT_DELAY regs_24$D_IN;
	if (regs_25$EN) regs_25 <= `BSV_ASSIGNMENT_DELAY regs_25$D_IN;
	if (regs_26$EN) regs_26 <= `BSV_ASSIGNMENT_DELAY regs_26$D_IN;
	if (regs_27$EN) regs_27 <= `BSV_ASSIGNMENT_DELAY regs_27$D_IN;
	if (regs_28$EN) regs_28 <= `BSV_ASSIGNMENT_DELAY regs_28$D_IN;
	if (regs_29$EN) regs_29 <= `BSV_ASSIGNMENT_DELAY regs_29$D_IN;
	if (regs_3$EN) regs_3 <= `BSV_ASSIGNMENT_DELAY regs_3$D_IN;
	if (regs_30$EN) regs_30 <= `BSV_ASSIGNMENT_DELAY regs_30$D_IN;
	if (regs_31$EN) regs_31 <= `BSV_ASSIGNMENT_DELAY regs_31$D_IN;
	if (regs_4$EN) regs_4 <= `BSV_ASSIGNMENT_DELAY regs_4$D_IN;
	if (regs_5$EN) regs_5 <= `BSV_ASSIGNMENT_DELAY regs_5$D_IN;
	if (regs_6$EN) regs_6 <= `BSV_ASSIGNMENT_DELAY regs_6$D_IN;
	if (regs_7$EN) regs_7 <= `BSV_ASSIGNMENT_DELAY regs_7$D_IN;
	if (regs_8$EN) regs_8 <= `BSV_ASSIGNMENT_DELAY regs_8$D_IN;
	if (regs_9$EN) regs_9 <= `BSV_ASSIGNMENT_DELAY regs_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    regs_0 = 32'hAAAAAAAA;
    regs_1 = 32'hAAAAAAAA;
    regs_10 = 32'hAAAAAAAA;
    regs_11 = 32'hAAAAAAAA;
    regs_12 = 32'hAAAAAAAA;
    regs_13 = 32'hAAAAAAAA;
    regs_14 = 32'hAAAAAAAA;
    regs_15 = 32'hAAAAAAAA;
    regs_16 = 32'hAAAAAAAA;
    regs_17 = 32'hAAAAAAAA;
    regs_18 = 32'hAAAAAAAA;
    regs_19 = 32'hAAAAAAAA;
    regs_2 = 32'hAAAAAAAA;
    regs_20 = 32'hAAAAAAAA;
    regs_21 = 32'hAAAAAAAA;
    regs_22 = 32'hAAAAAAAA;
    regs_23 = 32'hAAAAAAAA;
    regs_24 = 32'hAAAAAAAA;
    regs_25 = 32'hAAAAAAAA;
    regs_26 = 32'hAAAAAAAA;
    regs_27 = 32'hAAAAAAAA;
    regs_28 = 32'hAAAAAAAA;
    regs_29 = 32'hAAAAAAAA;
    regs_3 = 32'hAAAAAAAA;
    regs_30 = 32'hAAAAAAAA;
    regs_31 = 32'hAAAAAAAA;
    regs_4 = 32'hAAAAAAAA;
    regs_5 = 32'hAAAAAAAA;
    regs_6 = 32'hAAAAAAAA;
    regs_7 = 32'hAAAAAAAA;
    regs_8 = 32'hAAAAAAAA;
    regs_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRegfile

